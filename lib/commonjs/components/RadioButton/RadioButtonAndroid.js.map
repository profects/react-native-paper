{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","borderAnim","Animated","Value","radioAnim","prevProps","status","props","scale","theme","animation","state","setValue","timing","toValue","duration","useNativeDriver","start","disabled","onPress","value","style","rest","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","React","Component","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  style: any;\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n    const { scale } = this.props.theme.animation;\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      disabled,\n      onPress,\n      theme,\n      value,\n      status,\n      style,\n      ...rest\n    } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={[styles.container, style]}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]}