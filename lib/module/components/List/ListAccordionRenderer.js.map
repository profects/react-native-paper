{"version":3,"sources":["ListAccordionRenderer.tsx"],"names":["color","React","View","TouchableRipple","Icon","withTheme","styles","ListAccordionGroupContext","ListAccordionRenderer","Component","expanded","props","onPress","undefined","setState","state","render","left","right","children","theme","titleStyle","descriptionStyle","renderDescription","renderTitle","style","rowStyle","id","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","Error","expandedId","handlePress","onAccordionPress","container","row","primary","item","content","title","description","multiline","Children","map","child","isValidElement","cloneElement","titleNumberOfLines","descriptionNumberOfLines"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, ViewStyle, StyleProp, TextStyle } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\nimport { styles } from './ListAccordion';\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  renderTitle: (props: { style: StyleProp<TextStyle> }) => React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  renderDescription?: (props: {\n    style: StyleProp<TextStyle>;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to the wrapping row element.\n   */\n  rowStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordionRenderer extends React.Component<Props, State> {\n  static displayName = 'List.AccordionRenderer';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      right,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      renderDescription,\n      renderTitle,\n      style,\n      rowStyle,\n      id,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n              >\n                <View style={[styles.row, rowStyle]}>\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    {renderTitle({\n                      style: [\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ],\n                    })}\n\n                    {renderDescription\n                      ? renderDescription({\n                          style: [\n                            styles.description,\n                            {\n                              color: descriptionColor,\n                            },\n                            descriptionStyle,\n                          ],\n                        })\n                      : null}\n                  </View>\n                  {right\n                    ? right({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View\n                    style={[\n                      styles.item,\n                      renderDescription ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <Icon\n                      source={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, child => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(ListAccordionRenderer);\n"]}