{"version":3,"sources":["ListAccordionRenderer.tsx"],"names":["color","React","View","TouchableRipple","Icon","withTheme","styles","ListAccordionGroupContext","ListAccordionRenderer","state","expanded","props","handlePress","onPress","undefined","setState","left","right","children","theme","titleStyle","descriptionStyle","renderDescription","renderTitle","style","id","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","Error","expandedId","onAccordionPress","container","row","primary","item","content","title","description","multiline","Children","map","child","isValidElement","cloneElement","Component","displayName","defaultProps","titleNumberOfLines","descriptionNumberOfLines"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, ViewStyle, StyleProp, TextStyle } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\nimport { styles } from './ListAccordion';\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  renderTitle: (props: { style: StyleProp<TextStyle> }) => React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  renderDescription: (props: {\n    style: StyleProp<TextStyle>;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordionRenderer extends React.Component<Props, State> {\n  static displayName = 'List.AccordionRenderer';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      right,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      renderDescription,\n      renderTitle,\n      style,\n      id,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n              >\n                <View style={styles.row}>\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    {renderTitle({\n                      style: [\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ],\n                    })}\n\n                    {renderDescription &&\n                      renderDescription({\n                        style: [\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ],\n                      })}\n                  </View>\n                  {right\n                    ? right({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View\n                    style={[\n                      styles.item,\n                      renderDescription ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <Icon\n                      source={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, child => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(ListAccordionRenderer);\n"]}