{"version":3,"sources":["ListAccordionGroup.js"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","Component","constructor","arguments","state","expandedId","undefined","onAccordionPress","setState","currentExpandedId","render","children","props","createElement","Provider","value","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAMC,yBAAyB,gBAAGD,KAAK,CAACE,aAAN,CAAoB,IAApB,CAAlC;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAIC,kBAAkB;AAAG;AAAc,CAAC,MAAM;AAC1C,QAAMA,kBAAN,SAAiCH,KAAK,CAACI,SAAvC,CAAiD;AAC7CC,IAAAA,WAAW,GAAG;AACV,YAAM,GAAGC,SAAT;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,UAAU,EAAEC;AADH,OAAb;;AAGA,WAAKC,gBAAL,GAAyBF,UAAD,IAAgB;AACpC,aAAKG,QAAL,CAAc,CAAC;AAAEH,UAAAA,UAAU,EAAEI;AAAd,SAAD,MAAwC;AAClDJ,UAAAA,UAAU,EAAEI,iBAAiB,KAAKJ,UAAtB,GAAmCC,SAAnC,GAA+CD;AADT,SAAxC,CAAd;AAGH,OAJD;AAKH;;AACDK,IAAAA,MAAM,GAAG;AACL,YAAM;AAAEL,QAAAA,UAAF;AAAcE,QAAAA,gBAAd;AAAgCI,QAAAA;AAAhC,UAA6C,KAAKC,KAAxD;AACA,0BAAQf,KAAK,CAACgB,aAAN,CAAoBf,yBAAyB,CAACgB,QAA9C,EAAwD;AAAEC,QAAAA,KAAK,EAAE;AACjEV,UAAAA,UAAU,EAAEA,UAAU,IAAI,KAAKD,KAAL,CAAWC,UAD4B;AAEjEE,UAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,KAAKA;AAFsB;AAAT,OAAxD,EAGCI,QAHD,CAAR;AAIH;;AAlB4C;;AAoBjDX,EAAAA,kBAAkB,CAACgB,WAAnB,GAAiC,qBAAjC;AACA,SAAOhB,kBAAP;AACH,CAvBsC,GAAvC;;AAwBA,eAAeA,kBAAf","sourcesContent":["import * as React from 'react';\nexport const ListAccordionGroupContext = React.createContext(null);\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * function MyComponent() {\n *  return (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n *  );\n * }\n *```\n */\nlet ListAccordionGroup = /** @class */ (() => {\n    class ListAccordionGroup extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                expandedId: undefined,\n            };\n            this.onAccordionPress = (expandedId) => {\n                this.setState(({ expandedId: currentExpandedId }) => ({\n                    expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n                }));\n            };\n        }\n        render() {\n            const { expandedId, onAccordionPress, children } = this.props;\n            return (React.createElement(ListAccordionGroupContext.Provider, { value: {\n                    expandedId: expandedId || this.state.expandedId,\n                    onAccordionPress: onAccordionPress || this.onAccordionPress,\n                } }, children));\n        }\n    }\n    ListAccordionGroup.displayName = 'List.AccordionGroup';\n    return ListAccordionGroup;\n})();\nexport default ListAccordionGroup;\n"]}