{"version":3,"sources":["Dialog.js"],"names":["React","StyleSheet","Platform","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","Dialog","Component","render","children","dismissable","onDismiss","visible","style","theme","props","createElement","contentContainerStyle","borderRadius","roundness","backgroundColor","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","Content","Actions","Title","ScrollArea","defaultProps","create","marginVertical","OS","marginHorizontal","elevation","justifyContent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,cAArC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAIC,MAAM;AAAG;AAAc,CAAC,MAAM;AAC9B,QAAMA,MAAN,SAAqBT,KAAK,CAACU,SAA3B,CAAqC;AACjCC,IAAAA,MAAM,GAAG;AACL,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,WAAZ;AAAyBC,QAAAA,SAAzB;AAAoCC,QAAAA,OAApC;AAA6CC,QAAAA,KAA7C;AAAoDC,QAAAA;AAApD,UAA+D,KAAKC,KAA1E;AACA,0BAAQlB,KAAK,CAACmB,aAAN,CAAoBhB,KAApB,EAA2B;AAAEU,QAAAA,WAAW,EAAEA,WAAf;AAA4BC,QAAAA,SAAS,EAAEA,SAAvC;AAAkDC,QAAAA,OAAO,EAAEA,OAA3D;AAAoEK,QAAAA,qBAAqB,EAAE,CACtH;AACIC,UAAAA,YAAY,EAAEJ,KAAK,CAACK,SADxB;AAEIC,UAAAA,eAAe,EAAEN,KAAK,CAACO,MAAN,CAAaC;AAFlC,SADsH,EAKtHC,MAAM,CAACC,SAL+G,EAMtHX,KANsH;AAA3F,OAA3B,EAOChB,KAAK,CAAC4B,QAAN,CAAeC,OAAf,CAAuBjB,QAAvB,EACJkB,MADI,CACGC,KAAK,IAAIA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAD9C,EAEJC,GAFI,CAEA,CAACD,KAAD,EAAQE,CAAR,KAAc;AACnB,YAAIA,CAAC,KAAK,CAAN,iBACAjC,KAAK,CAACkC,cAAN,CAAqBH,KAArB,CADA,IAEAA,KAAK,CAACI,IAAN,KAAe/B,aAFnB,EAEkC;AAC9B;AACA,8BAAOJ,KAAK,CAACoC,YAAN,CAAmBL,KAAnB,EAA0B;AAC7Bf,YAAAA,KAAK,EAAE,CAAC;AAAEqB,cAAAA,UAAU,EAAE;AAAd,aAAD,EAAqBN,KAAK,CAACb,KAAN,CAAYF,KAAjC;AADsB,WAA1B,CAAP;AAGH;;AACD,eAAOe,KAAP;AACH,OAZQ,CAPD,CAAR;AAoBH;;AAvBgC,GADP,CA0B9B;;;AACAtB,EAAAA,MAAM,CAAC6B,OAAP,GAAiBlC,aAAjB,CA3B8B,CA4B9B;;AACAK,EAAAA,MAAM,CAAC8B,OAAP,GAAiBlC,aAAjB,CA7B8B,CA8B9B;;AACAI,EAAAA,MAAM,CAAC+B,KAAP,GAAelC,WAAf,CA/B8B,CAgC9B;;AACAG,EAAAA,MAAM,CAACgC,UAAP,GAAoBlC,gBAApB;AACAE,EAAAA,MAAM,CAACiC,YAAP,GAAsB;AAClB7B,IAAAA,WAAW,EAAE,IADK;AAElBE,IAAAA,OAAO,EAAE;AAFS,GAAtB;AAIA,SAAON,MAAP;AACH,CAvC0B,GAA3B;;AAwCA,MAAMiB,MAAM,GAAGzB,UAAU,CAAC0C,MAAX,CAAkB;AAC7BhB,EAAAA,SAAS,EAAE;AACP;;;;;;;AAOAiB,IAAAA,cAAc,EAAE1C,QAAQ,CAAC2C,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC,CAR1C;AASPC,IAAAA,gBAAgB,EAAE,EATX;AAUPC,IAAAA,SAAS,EAAE,EAVJ;AAWPC,IAAAA,cAAc,EAAE;AAXT;AADkB,CAAlB,CAAf;AAeA,eAAexC,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showDialog = () => this.setState({ visible: true });\n *\n *   _hideDialog = () => this.setState({ visible: false });\n *\n *   render() {\n *     return (\n *       <View>\n *         <Button onPress={this._showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog\n *              visible={this.state.visible}\n *              onDismiss={this._hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={this._hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nlet Dialog = /** @class */ (() => {\n    class Dialog extends React.Component {\n        render() {\n            const { children, dismissable, onDismiss, visible, style, theme, } = this.props;\n            return (React.createElement(Modal, { dismissable: dismissable, onDismiss: onDismiss, visible: visible, contentContainerStyle: [\n                    {\n                        borderRadius: theme.roundness,\n                        backgroundColor: theme.colors.surface,\n                    },\n                    styles.container,\n                    style,\n                ] }, React.Children.toArray(children)\n                .filter(child => child != null && typeof child !== 'boolean')\n                .map((child, i) => {\n                if (i === 0 &&\n                    React.isValidElement(child) &&\n                    child.type === DialogContent) {\n                    // Dialog content is the first item, so we add a top padding\n                    return React.cloneElement(child, {\n                        style: [{ paddingTop: 24 }, child.props.style],\n                    });\n                }\n                return child;\n            })));\n        }\n    }\n    // @component ./DialogContent.tsx\n    Dialog.Content = DialogContent;\n    // @component ./DialogActions.tsx\n    Dialog.Actions = DialogActions;\n    // @component ./DialogTitle.tsx\n    Dialog.Title = DialogTitle;\n    // @component ./DialogScrollArea.tsx\n    Dialog.ScrollArea = DialogScrollArea;\n    Dialog.defaultProps = {\n        dismissable: true,\n        visible: false,\n    };\n    return Dialog;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        /**\n         * This prevents the shadow from being clipped on Android since Android\n         * doesn't support `overflow: visible`.\n         * One downside for this fix is that it will disable clicks on the area\n         * of the shadow around the dialog, consequently, if you click around the\n         * dialog (44 pixel from the top and bottom) it won't be dismissed.\n         */\n        marginVertical: Platform.OS === 'android' ? 44 : 0,\n        marginHorizontal: 26,\n        elevation: 24,\n        justifyContent: 'flex-start',\n    },\n});\nexport default withTheme(Dialog);\n"]}