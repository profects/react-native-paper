{"version":3,"sources":["CheckboxAndroid.js"],"names":["ANIMATION_DURATION","CheckboxAndroid","arguments","state","scaleAnim","Animated","Value","prevProps","status","props","checked","animation","theme","sequence","timing","toValue","duration","scale","useNativeDriver","start","disabled","onPress","style","rest","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","React","createElement","TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","styles","container","View","transform","MaterialCommunityIcon","allowFontScaling","name","size","direction","StyleSheet","absoluteFill","fillContainer","fill","borderColor","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nlet CheckboxAndroid = /** @class */ (() => {\n    class CheckboxAndroid extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                scaleAnim: new Animated.Value(1),\n            };\n        }\n        componentDidUpdate(prevProps) {\n            if (prevProps.status === this.props.status) {\n                return;\n            }\n            const checked = this.props.status === 'checked';\n            const { animation } = this.props.theme;\n            Animated.sequence([\n                Animated.timing(this.state.scaleAnim, {\n                    toValue: 0.85,\n                    duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n                    useNativeDriver: false,\n                }),\n                Animated.timing(this.state.scaleAnim, {\n                    toValue: 1,\n                    duration: checked\n                        ? ANIMATION_DURATION * animation.scale\n                        : ANIMATION_DURATION * animation.scale * 1.75,\n                    useNativeDriver: false,\n                }),\n            ]).start();\n        }\n        render() {\n            const { status, disabled, onPress, theme, style, ...rest } = this.props;\n            const checked = status === 'checked';\n            const indeterminate = status === 'indeterminate';\n            const checkedColor = this.props.color || theme.colors.accent;\n            const uncheckedColor = this.props.uncheckedColor ||\n                color(theme.colors.text)\n                    .alpha(theme.dark ? 0.7 : 0.54)\n                    .rgb()\n                    .string();\n            let rippleColor, checkboxColor;\n            if (disabled) {\n                rippleColor = color(theme.colors.text)\n                    .alpha(0.16)\n                    .rgb()\n                    .string();\n                checkboxColor = theme.colors.disabled;\n            }\n            else {\n                rippleColor = color(checkedColor)\n                    .fade(0.32)\n                    .rgb()\n                    .string();\n                checkboxColor = checked ? checkedColor : uncheckedColor;\n            }\n            const borderWidth = this.state.scaleAnim.interpolate({\n                inputRange: [0.8, 1],\n                outputRange: [7, 0],\n            });\n            const icon = indeterminate\n                ? 'minus-box'\n                : checked\n                    ? 'checkbox-marked'\n                    : 'checkbox-blank-outline';\n            return (React.createElement(TouchableRipple, Object.assign({}, rest, { borderless: true, rippleColor: rippleColor, onPress: onPress, disabled: disabled, accessibilityTraits: disabled ? ['button', 'disabled'] : 'button', accessibilityComponentType: \"button\", accessibilityRole: \"button\", accessibilityStates: disabled ? ['disabled'] : [], accessibilityLiveRegion: \"polite\", style: [styles.container, style] }),\n                React.createElement(Animated.View, { style: { transform: [{ scale: this.state.scaleAnim }] } },\n                    React.createElement(MaterialCommunityIcon, { allowFontScaling: false, name: icon, size: 24, color: checkboxColor, direction: \"ltr\" }),\n                    React.createElement(View, { style: [StyleSheet.absoluteFill, styles.fillContainer] },\n                        React.createElement(Animated.View, { style: [\n                                styles.fill,\n                                { borderColor: checkboxColor },\n                                { borderWidth },\n                            ] })))));\n        }\n    }\n    CheckboxAndroid.displayName = 'Checkbox.Android';\n    return CheckboxAndroid;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: 18,\n        width: 36,\n        height: 36,\n        padding: 6,\n    },\n    fillContainer: {\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    fill: {\n        height: 14,\n        width: 14,\n    },\n});\nexport default withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]}