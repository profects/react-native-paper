{"version":3,"sources":["Card.js"],"names":["React","StyleSheet","Animated","TouchableWithoutFeedback","View","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","Component","constructor","arguments","state","elevation","Value","props","handlePressIn","scale","theme","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","render","children","cardElevation","onLongPress","onPress","style","testID","accessible","rest","roundness","total","Children","count","siblings","map","child","isValidElement","type","displayName","createElement","Object","assign","borderRadius","delayPressIn","disabled","onPressIn","undefined","onPressOut","styles","innerContainer","index","cloneElement","Content","Actions","Cover","Title","defaultProps","create","flexGrow","flexShrink"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Animated, TouchableWithoutFeedback, View, } from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nlet Card = /** @class */ (() => {\n    class Card extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                // @ts-ignore\n                elevation: new Animated.Value(this.props.elevation),\n            };\n            this.handlePressIn = () => {\n                const { scale } = this.props.theme.animation;\n                Animated.timing(this.state.elevation, {\n                    toValue: 8,\n                    duration: 150 * scale,\n                    useNativeDriver: false,\n                }).start();\n            };\n            this.handlePressOut = () => {\n                const { scale } = this.props.theme.animation;\n                Animated.timing(this.state.elevation, {\n                    // @ts-ignore\n                    toValue: this.props.elevation,\n                    duration: 150 * scale,\n                    useNativeDriver: false,\n                }).start();\n            };\n        }\n        render() {\n            const { children, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            elevation: cardElevation, onLongPress, onPress, style, theme, testID, accessible, ...rest } = this.props;\n            const { elevation } = this.state;\n            const { roundness } = theme;\n            const total = React.Children.count(children);\n            const siblings = React.Children.map(children, child => React.isValidElement(child) && child.type\n                ? child.type.displayName\n                : null);\n            return (React.createElement(Surface\n            //@ts-ignore\n            , Object.assign({ \n                //@ts-ignore\n                style: [{ borderRadius: roundness, elevation }, style] }, rest),\n                React.createElement(TouchableWithoutFeedback, { delayPressIn: 0, disabled: !(onPress || onLongPress), onLongPress: onLongPress, onPress: onPress, onPressIn: onPress ? this.handlePressIn : undefined, onPressOut: onPress ? this.handlePressOut : undefined, testID: testID, accessible: accessible },\n                    React.createElement(View, { style: styles.innerContainer }, React.Children.map(children, (child, index) => React.isValidElement(child)\n                        ? React.cloneElement(child, {\n                            index,\n                            total,\n                            siblings,\n                        })\n                        : child)))));\n        }\n    }\n    // @component ./CardContent.tsx\n    Card.Content = CardContent;\n    // @component ./CardActions.tsx\n    Card.Actions = CardActions;\n    // @component ./CardCover.tsx\n    Card.Cover = CardCover;\n    // @component ./CardTitle.tsx\n    Card.Title = CardTitle;\n    Card.defaultProps = {\n        elevation: 1,\n    };\n    return Card;\n})();\nconst styles = StyleSheet.create({\n    innerContainer: {\n        flexGrow: 1,\n        flexShrink: 1,\n    },\n});\nexport default withTheme(Card);\n"]}