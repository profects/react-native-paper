{"version":3,"sources":["IconButton.js"],"names":["IconButton","icon","customColor","color","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","CrossFadeIcon","Icon","buttonSize","React","createElement","TouchableRipple","borderless","centered","styles","container","width","height","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","hitSlop","supported","top","left","bottom","right","View","source","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"wbAAA,oDACA,yCACA,oDACA,0EACA,oDACA,sEACA,wCAiCA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAA6H,IAA1HC,CAAAA,IAA0H,MAA1HA,IAA0H,CAA7GC,WAA6G,MAApHC,KAAoH,gBAAhGC,IAAgG,CAAhGA,IAAgG,oBAAzF,EAAyF,WAArFC,kBAAqF,MAArFA,kBAAqF,CAAjEC,QAAiE,MAAjEA,QAAiE,CAAvDC,OAAuD,MAAvDA,OAAuD,oBAA9CC,QAA8C,CAA9CA,QAA8C,wBAAnC,KAAmC,eAA5BC,KAA4B,MAA5BA,KAA4B,CAArBC,KAAqB,MAArBA,KAAqB,CAAXC,IAAW,0IAC5I,GAAMC,CAAAA,SAAS,CAAG,MAAOV,CAAAA,WAAP,GAAuB,WAAvB,CAAqCA,WAArC,CAAmDO,KAAK,CAACI,MAAN,CAAaC,IAAlF,CACA,GAAMC,CAAAA,WAAW,CAAG,mBAAMH,SAAN,EACfI,KADe,CACT,IADS,EAEfC,GAFe,GAGfC,MAHe,EAApB,CAIA,GAAMC,CAAAA,aAAa,CAAGX,QAAQ,CAAGY,sBAAH,CAAmBC,aAAjD,CACA,GAAMC,CAAAA,UAAU,CAAGlB,IAAI,CAAG,GAA1B,CACA,MAAQmB,CAAAA,KAAK,CAACC,aAAN,CAAoBC,wBAApB,CAAqC,sBAAc,CAAEC,UAAU,CAAE,IAAd,CAAoBC,QAAQ,CAAE,IAA9B,CAAoCpB,OAAO,CAAEA,OAA7C,CAAsDQ,WAAW,CAAEA,WAAnE,CAAgFL,KAAK,CAAE,CAC1IkB,MAAM,CAACC,SADmI,CAE1I,CAAEC,KAAK,CAAER,UAAT,CAAqBS,MAAM,CAAET,UAA7B,CAAyCU,YAAY,CAAEV,UAAU,CAAG,CAApE,CAF0I,CAG1IhB,QAAQ,EAAIsB,MAAM,CAACtB,QAHuH,CAI1II,KAJ0I,CAAvF,CAKpDL,kBAAkB,CAAEA,kBALgC,CAKZ4B,mBAAmB,CAAE3B,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAL7C,CAKuD4B,0BAA0B,CAAE,QALnF,CAK6FC,iBAAiB,CAAE,QALhH,CAK0HC,mBAAmB,CAAE9B,QAAQ,CAAG,CAAC,UAAD,CAAH,CAAkB,EALzK,CAK6KA,QAAQ,CAAEA,QALvL,CAKiM+B,OAAO,CAE/PZ,yBAAgBa,SAAhB,CACM,CAAEC,GAAG,CAAE,EAAP,CAAWC,IAAI,CAAE,EAAjB,CAAqBC,MAAM,CAAE,EAA7B,CAAiCC,KAAK,CAAE,EAAxC,CADN,CAEM,CAAEH,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,MAAM,CAAE,CAA3B,CAA8BC,KAAK,CAAE,CAArC,CATiD,CAAd,CASS/B,IATT,CAArC,CAUJY,KAAK,CAACC,aAAN,CAAoBmB,iBAApB,CAA0B,IAA1B,CACIpB,KAAK,CAACC,aAAN,CAAoBL,aAApB,CAAmC,CAAEhB,KAAK,CAAES,SAAT,CAAoBgC,MAAM,CAAE3C,IAA5B,CAAkCG,IAAI,CAAEA,IAAxC,CAAnC,CADJ,CAVI,CAAR,CAYH,CApBD,CAqBA,GAAMwB,CAAAA,MAAM,CAAGiB,wBAAWC,MAAX,CAAkB,CAE7BjB,SAAS,CAAE,CACPkB,UAAU,CAAE,QADL,CAEPC,cAAc,CAAE,QAFT,CAGPC,QAAQ,CAAE,QAHH,CAIPC,MAAM,CAAE,CAJD,CAFkB,CAQ7B5C,QAAQ,CAAE,CACN6C,OAAO,CAAE,IADH,CARmB,CAAlB,CAAf,C,aAYe,uBAAUnD,UAAV,C","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple';\nimport Icon from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst IconButton = ({ icon, color: customColor, size = 24, accessibilityLabel, disabled, onPress, animated = false, theme, style, ...rest }) => {\n    const iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n    const rippleColor = color(iconColor)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n    const buttonSize = size * 1.5;\n    return (React.createElement(TouchableRipple, Object.assign({ borderless: true, centered: true, onPress: onPress, rippleColor: rippleColor, style: [\n            styles.container,\n            { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n            disabled && styles.disabled,\n            style,\n        ], accessibilityLabel: accessibilityLabel, accessibilityTraits: disabled ? ['button', 'disabled'] : 'button', accessibilityComponentType: \"button\", accessibilityRole: \"button\", accessibilityStates: disabled ? ['disabled'] : [], disabled: disabled, hitSlop: \n        // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n        TouchableRipple.supported\n            ? { top: 10, left: 10, bottom: 10, right: 10 }\n            : { top: 6, left: 6, bottom: 6, right: 6 } }, rest),\n        React.createElement(View, null,\n            React.createElement(IconComponent, { color: iconColor, source: icon, size: size }))));\n};\nconst styles = StyleSheet.create({\n    // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n    container: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden',\n        margin: 6,\n    },\n    disabled: {\n        opacity: 0.32,\n    },\n});\nexport default withTheme(IconButton);\n"]}