{"version":3,"sources":["index.native.js"],"names":["React","Platform","TouchableHighlight","TouchableNativeFeedback","View","color","withTheme","ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","Component","render","props","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","OS","Version","supported","createElement","Object","assign","Ripple","overflow","Children","only","fade","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, TouchableHighlight, TouchableNativeFeedback, View, } from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\nlet TouchableRipple = /** @class */ (() => {\n    class TouchableRipple extends React.Component {\n        render() {\n            const { style, background, borderless, disabled: disabledProp, rippleColor, underlayColor, children, theme, ...rest } = this.props;\n            const { dark, colors } = theme;\n            const disabled = disabledProp || !this.props.onPress;\n            const calculatedRippleColor = rippleColor ||\n                color(colors.text)\n                    .alpha(dark ? 0.32 : 0.2)\n                    .rgb()\n                    .string();\n            // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n            // https://github.com/facebook/react-native/issues/6480\n            const useForeground = Platform.OS === 'android' &&\n                Platform.Version >= ANDROID_VERSION_PIE &&\n                borderless;\n            if (TouchableRipple.supported) {\n                return (React.createElement(TouchableNativeFeedback, Object.assign({}, rest, { disabled: disabled, useForeground: useForeground, background: background != null\n                        ? background\n                        : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless) }),\n                    React.createElement(View, { style: [borderless && { overflow: 'hidden' }, style] }, React.Children.only(children))));\n            }\n            return (React.createElement(TouchableHighlight, Object.assign({}, rest, { disabled: disabled, style: [borderless && { overflow: 'hidden' }, style], underlayColor: underlayColor != null\n                    ? underlayColor\n                    : color(calculatedRippleColor)\n                        .fade(0.5)\n                        .rgb()\n                        .string() }), React.Children.only(children)));\n        }\n    }\n    TouchableRipple.defaultProps = {\n        borderless: false,\n    };\n    TouchableRipple.supported = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n    return TouchableRipple;\n})();\nexport default withTheme(TouchableRipple);\n"]}