{"version":3,"sources":["index.native.js"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","props","style","background","borderless","disabledProp","disabled","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","React","createElement","TouchableNativeFeedback","Ripple","View","overflow","Children","only","TouchableHighlight","fade","Component","defaultProps"],"mappings":"k5BAAA,oDACA,yCACA,oDACA,2C,mtBACA,GAAMA,CAAAA,wBAAwB,CAAG,EAAjC,CACA,GAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CACA,GAAIC,CAAAA,eAAe,CAAkB,UAAM,IACjCA,CAAAA,eADiC,iUAE1B,iBACmH,KAAKC,KADxH,CACGC,KADH,aACGA,KADH,CACUC,UADV,aACUA,UADV,CACsBC,UADtB,aACsBA,UADtB,CAC4CC,YAD5C,aACkCC,QADlC,CAC0DC,WAD1D,aAC0DA,WAD1D,CACuEC,aADvE,aACuEA,aADvE,CACsFC,QADtF,aACsFA,QADtF,CACgGC,KADhG,aACgGA,KADhG,CAC0GC,IAD1G,uJAEGC,CAAAA,IAFH,CAEoBF,KAFpB,CAEGE,IAFH,CAESC,MAFT,CAEoBH,KAFpB,CAESG,MAFT,CAGL,GAAMP,CAAAA,QAAQ,CAAGD,YAAY,EAAI,CAAC,KAAKJ,KAAL,CAAWa,OAA7C,CACA,GAAMC,CAAAA,qBAAqB,CAAGR,WAAW,EACrC,mBAAMM,MAAM,CAACG,IAAb,EACKC,KADL,CACWL,IAAI,CAAG,IAAH,CAAU,GADzB,EAEKM,GAFL,GAGKC,MAHL,EADJ,CAOA,GAAMC,CAAAA,aAAa,CAAGC,sBAASC,EAAT,GAAgB,SAAhB,EAClBD,sBAASE,OAAT,EAAoBxB,mBADF,EAElBK,UAFJ,CAGA,GAAIJ,eAAe,CAACwB,SAApB,CAA+B,CAC3B,MAAQC,CAAAA,KAAK,CAACC,aAAN,CAAoBC,oCAApB,CAA6C,sBAAc,EAAd,CAAkBhB,IAAlB,CAAwB,CAAEL,QAAQ,CAAEA,QAAZ,CAAsBc,aAAa,CAAEA,aAArC,CAAoDjB,UAAU,CAAEA,UAAU,EAAI,IAAd,CACnIA,UADmI,CAEnIwB,qCAAwBC,MAAxB,CAA+Bb,qBAA/B,CAAsDX,UAAtD,CAFmE,CAAxB,CAA7C,CAGJqB,KAAK,CAACC,aAAN,CAAoBG,iBAApB,CAA0B,CAAE3B,KAAK,CAAE,CAACE,UAAU,EAAI,CAAE0B,QAAQ,CAAE,QAAZ,CAAf,CAAuC5B,KAAvC,CAAT,CAA1B,CAAoFuB,KAAK,CAACM,QAAN,CAAeC,IAAf,CAAoBvB,QAApB,CAApF,CAHI,CAAR,CAIH,CACD,MAAQgB,CAAAA,KAAK,CAACC,aAAN,CAAoBO,+BAApB,CAAwC,sBAAc,EAAd,CAAkBtB,IAAlB,CAAwB,CAAEL,QAAQ,CAAEA,QAAZ,CAAsBJ,KAAK,CAAE,CAACE,UAAU,EAAI,CAAE0B,QAAQ,CAAE,QAAZ,CAAf,CAAuC5B,KAAvC,CAA7B,CAA4EM,aAAa,CAAEA,aAAa,EAAI,IAAjB,CACzJA,aADyJ,CAEzJ,mBAAMO,qBAAN,EACGmB,IADH,CACQ,GADR,EAEGhB,GAFH,GAGGC,MAHH,EAF8D,CAAxB,CAAxC,CAKkBM,KAAK,CAACM,QAAN,CAAeC,IAAf,CAAoBvB,QAApB,CALlB,CAAR,CAMH,CA5BkC,6BACTgB,KAAK,CAACU,SADG,EA8BvCnC,eAAe,CAACoC,YAAhB,CAA+B,CAC3BhC,UAAU,CAAE,KADe,CAA/B,CAGAJ,eAAe,CAACwB,SAAhB,CAA4BH,sBAASC,EAAT,GAAgB,SAAhB,EAA6BD,sBAASE,OAAT,EAAoBzB,wBAA7E,CACA,MAAOE,CAAAA,eAAP,CACH,CAnCmC,EAApC,C,aAoCe,uBAAUA,eAAV,C","sourcesContent":["import * as React from 'react';\nimport { Platform, TouchableHighlight, TouchableNativeFeedback, View, } from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\nlet TouchableRipple = /** @class */ (() => {\n    class TouchableRipple extends React.Component {\n        render() {\n            const { style, background, borderless, disabled: disabledProp, rippleColor, underlayColor, children, theme, ...rest } = this.props;\n            const { dark, colors } = theme;\n            const disabled = disabledProp || !this.props.onPress;\n            const calculatedRippleColor = rippleColor ||\n                color(colors.text)\n                    .alpha(dark ? 0.32 : 0.2)\n                    .rgb()\n                    .string();\n            // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n            // https://github.com/facebook/react-native/issues/6480\n            const useForeground = Platform.OS === 'android' &&\n                Platform.Version >= ANDROID_VERSION_PIE &&\n                borderless;\n            if (TouchableRipple.supported) {\n                return (React.createElement(TouchableNativeFeedback, Object.assign({}, rest, { disabled: disabled, useForeground: useForeground, background: background != null\n                        ? background\n                        : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless) }),\n                    React.createElement(View, { style: [borderless && { overflow: 'hidden' }, style] }, React.Children.only(children))));\n            }\n            return (React.createElement(TouchableHighlight, Object.assign({}, rest, { disabled: disabled, style: [borderless && { overflow: 'hidden' }, style], underlayColor: underlayColor != null\n                    ? underlayColor\n                    : color(calculatedRippleColor)\n                        .fade(0.5)\n                        .rgb()\n                        .string() }), React.Children.only(children)));\n        }\n    }\n    TouchableRipple.defaultProps = {\n        borderless: false,\n    };\n    TouchableRipple.supported = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n    return TouchableRipple;\n})();\nexport default withTheme(TouchableRipple);\n"]}