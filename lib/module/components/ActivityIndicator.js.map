{"version":3,"sources":["ActivityIndicator.js"],"names":["React","Animated","Easing","Platform","StyleSheet","View","withTheme","DURATION","ActivityIndicator","Component","constructor","arguments","state","timer","Value","fade","props","animating","hidesWhenStopped","rotation","undefined","startRotation","scale","theme","animation","timing","duration","toValue","isInteraction","useNativeDriver","start","setValue","loop","stopRotation","stop","componentDidMount","easing","linear","OS","componentDidUpdate","prevProps","bind","render","color","indicatorColor","size","indicatorSize","style","rest","colors","primary","frames","bezier","containerStyle","width","height","overflow","createElement","Object","assign","styles","container","opacity","collapsable","map","index","inputRange","Array","from","_","frameIndex","outputRange","progress","direction","layerStyle","transform","rotate","interpolate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius","key","layer","defaultProps","create","justifyContent","alignItems","absoluteFillObject"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,IAAjD,QAA8D,cAA9D;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIC,iBAAiB;AAAG;AAAc,CAAC,MAAM;AACzC,QAAMA,iBAAN,SAAgCR,KAAK,CAACS,SAAtC,CAAgD;AAC5CC,IAAAA,WAAW,GAAG;AACV,YAAM,GAAGC,SAAT;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,KAAK,EAAE,IAAIZ,QAAQ,CAACa,KAAb,CAAmB,CAAnB,CADE;AAETC,QAAAA,IAAI,EAAE,IAAId,QAAQ,CAACa,KAAb,CAAmB,CAAC,KAAKE,KAAL,CAAWC,SAAZ,IAAyB,KAAKD,KAAL,CAAWE,gBAApC,GAAuD,CAAvD,GAA2D,CAA9E;AAFG,OAAb;AAIA,WAAKC,QAAL,GAAgBC,SAAhB;;AACA,WAAKC,aAAL,GAAqB,MAAM;AACvB,cAAM;AAAEN,UAAAA,IAAF;AAAQF,UAAAA;AAAR,YAAkB,KAAKD,KAA7B;AACA,cAAM;AAAEU,UAAAA;AAAF,YAAY,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,SAAnC,CAFuB,CAGvB;;AACAvB,QAAAA,QAAQ,CAACwB,MAAT,CAAgBV,IAAhB,EAAsB;AAClBW,UAAAA,QAAQ,EAAE,MAAMJ,KADE;AAElBK,UAAAA,OAAO,EAAE,CAFS;AAGlBC,UAAAA,aAAa,EAAE,KAHG;AAIlBC,UAAAA,eAAe,EAAE;AAJC,SAAtB,EAKGC,KALH,GAJuB,CAUvB;;AACA,YAAI,KAAKX,QAAT,EAAmB;AACfN,UAAAA,KAAK,CAACkB,QAAN,CAAe,CAAf,EADe,CAEf;;AACA9B,UAAAA,QAAQ,CAAC+B,IAAT,CAAc,KAAKb,QAAnB,EAA6BW,KAA7B;AACH;AACJ,OAhBD;;AAiBA,WAAKG,YAAL,GAAoB,MAAM;AACtB,YAAI,KAAKd,QAAT,EAAmB;AACf,eAAKA,QAAL,CAAce,IAAd;AACH;AACJ,OAJD;AAKH;;AACDC,IAAAA,iBAAiB,GAAG;AAChB,YAAM;AAAElB,QAAAA;AAAF,UAAgB,KAAKD,KAA3B;AACA,YAAM;AAAEH,QAAAA;AAAF,UAAY,KAAKD,KAAvB,CAFgB,CAGhB;;AACA,WAAKO,QAAL,GAAgBlB,QAAQ,CAACwB,MAAT,CAAgBZ,KAAhB,EAAuB;AACnCa,QAAAA,QAAQ,EAAEnB,QADyB;AAEnC6B,QAAAA,MAAM,EAAElC,MAAM,CAACmC,MAFoB;AAGnC;AACAR,QAAAA,eAAe,EAAE1B,QAAQ,CAACmC,EAAT,KAAgB,KAJE;AAKnCX,QAAAA,OAAO,EAAE,CAL0B;AAMnCC,QAAAA,aAAa,EAAE;AANoB,OAAvB,CAAhB;;AAQA,UAAIX,SAAJ,EAAe;AACX,aAAKI,aAAL;AACH;AACJ;;AACDkB,IAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,YAAM;AAAEvB,QAAAA,SAAF;AAAaC,QAAAA,gBAAb;AAA+BK,QAAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAEF,YAAAA;AAAF;AAAb;AAAtC,UAAqE,KAAKN,KAAhF;AACA,YAAM;AAAED,QAAAA;AAAF,UAAW,KAAKH,KAAtB;;AACA,UAAIK,SAAS,KAAKuB,SAAS,CAACvB,SAA5B,EAAuC;AACnC,YAAIA,SAAJ,EAAe;AACX,eAAKI,aAAL;AACH,SAFD,MAGK,IAAIH,gBAAJ,EAAsB;AACvB;AACAjB,UAAAA,QAAQ,CAACwB,MAAT,CAAgBV,IAAhB,EAAsB;AAClBW,YAAAA,QAAQ,EAAE,MAAMJ,KADE;AAElBK,YAAAA,OAAO,EAAE,CAFS;AAGlBE,YAAAA,eAAe,EAAE,IAHC;AAIlBD,YAAAA,aAAa,EAAE;AAJG,WAAtB,EAKGE,KALH,CAKS,KAAKG,YAAL,CAAkBQ,IAAlB,CAAuB,IAAvB,CALT;AAMH,SARI,MASA;AACD,eAAKR,YAAL;AACH;AACJ;AACJ;;AACDS,IAAAA,MAAM,GAAG;AACL,YAAM;AAAE3B,QAAAA,IAAF;AAAQF,QAAAA;AAAR,UAAkB,KAAKD,KAA7B;;AACA,0BAIiE,KAAKI,KAJtE;AAAA,YAAM;AACN;AACAC,QAAAA,SAFM;AAEK0B,QAAAA,KAAK,EAAEC,cAFZ;AAGN;AACA1B,QAAAA,gBAJM;AAIY2B,QAAAA,IAAI,EAAEC,aAJlB;AAIiCC,QAAAA,KAJjC;AAIwCxB,QAAAA;AAJxC,OAAN;AAAA,YAIwDyB,IAJxD;;AAKA,YAAML,KAAK,GAAGC,cAAc,IAAIrB,KAAK,CAAC0B,MAAN,CAAaC,OAA7C;AACA,YAAML,IAAI,GAAG,OAAOC,aAAP,KAAyB,QAAzB,GACPA,aAAa,KAAK,OAAlB,GACI,EADJ,GAEI,EAHG,GAIPA,aAAa,GACTA,aADS,GAET,EANV;AAOA,YAAMK,MAAM,GAAI,KAAK5C,QAAN,GAAkB,IAAjC;AACA,YAAM6B,MAAM,GAAGlC,MAAM,CAACkD,MAAP,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,CAAf;AACA,YAAMC,cAAc,GAAG;AACnBC,QAAAA,KAAK,EAAET,IADY;AAEnBU,QAAAA,MAAM,EAAEV,IAAI,GAAG,CAFI;AAGnBW,QAAAA,QAAQ,EAAE;AAHS,OAAvB;AAKA,0BAAQxD,KAAK,CAACyD,aAAN,CAAoBpD,IAApB,EAA0BqD,MAAM,CAACC,MAAP,CAAc;AAAEZ,QAAAA,KAAK,EAAE,CAACa,MAAM,CAACC,SAAR,EAAmBd,KAAnB;AAAT,OAAd,EAAoDC,IAApD,CAA1B,eACJhD,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAE0C,QAAAA,KAAK,EAAE,CAAC;AAAEO,UAAAA,KAAK,EAAET,IAAT;AAAeU,UAAAA,MAAM,EAAEV,IAAvB;AAA6BiB,UAAAA,OAAO,EAAE/C;AAAtC,SAAD,CAAT;AAAyDgD,QAAAA,WAAW,EAAE;AAAtE,OAAnC,EAAkH,CAAC,CAAD,EAAI,CAAJ,EAAOC,GAAP,CAAWC,KAAK,IAAI;AAClI;AACA,cAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUhB,MAAV,CAAX,EAA8B,CAACkB,CAAD,EAAIC,UAAJ,KAAmBA,UAAU,IAAInB,MAAM,GAAG,CAAb,CAA3D,CAAnB;AACA,cAAMoB,WAAW,GAAGJ,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUhB,MAAV,CAAX,EAA8B,CAACkB,CAAD,EAAIC,UAAJ,KAAmB;AACjE,cAAIE,QAAQ,GAAI,IAAIF,UAAL,IAAoBnB,MAAM,GAAG,CAA7B,CAAf;AACA,gBAAMhC,QAAQ,GAAG8C,KAAK,GAAG,EAAE,MAAM,EAAR,CAAH,GAAiB,EAAE,MAAM,EAAR,CAAvC;;AACA,cAAIO,QAAQ,GAAG,GAAf,EAAoB;AAChBA,YAAAA,QAAQ,GAAG,MAAMA,QAAjB;AACH;;AACD,gBAAMC,SAAS,GAAGR,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAAC,CAAhC;AACA,2BAAUQ,SAAS,IAAI,MAAM,EAAV,CAAT,GAAyBrC,MAAM,CAACoC,QAAD,CAA/B,GACNrD,QADJ;AAEH,SATmB,CAApB;AAUA,cAAMuD,UAAU,GAAG;AACfpB,UAAAA,KAAK,EAAET,IADQ;AAEfU,UAAAA,MAAM,EAAEV,IAFO;AAGf8B,UAAAA,SAAS,EAAE,CACP;AACIC,YAAAA,MAAM,EAAE/D,KAAK,CAACgE,WAAN,CAAkB;AACtBX,cAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADU;AAEtBK,cAAAA,WAAW,EAAE,WACN,IAAI,EAAJ,GAAS,EADH,oBAEN,IAAI,GAAJ,GAAU,EAAV,GAAe,EAFT;AAFS,aAAlB;AADZ,WADO;AAHI,SAAnB;AAeA,cAAMO,aAAa,GAAG;AAClBxB,UAAAA,KAAK,EAAET,IADW;AAElBU,UAAAA,MAAM,EAAEV,IAFU;AAGlB8B,UAAAA,SAAS,EAAE,CACP;AACII,YAAAA,UAAU,EAAEd,KAAK,GAAG,CAACpB,IAAD,GAAQ,CAAX,GAAe;AADpC,WADO,EAIP;AACI+B,YAAAA,MAAM,EAAE/D,KAAK,CAACgE,WAAN,CAAkB;AAAEX,cAAAA,UAAF;AAAcK,cAAAA;AAAd,aAAlB;AADZ,WAJO;AAHO,SAAtB;AAYA,cAAMS,WAAW,GAAGf,KAAK,GAAG;AAAEgB,UAAAA,GAAG,EAAEpC,IAAI,GAAG;AAAd,SAAH,GAAuB,IAAhD;AACA,cAAMqC,SAAS,GAAG;AACd5B,UAAAA,KAAK,EAAET,IADO;AAEdU,UAAAA,MAAM,EAAEV,IAFM;AAGdsC,UAAAA,WAAW,EAAExC,KAHC;AAIdyC,UAAAA,WAAW,EAAEvC,IAAI,GAAG,EAJN;AAKdwC,UAAAA,YAAY,EAAExC,IAAI,GAAG;AALP,SAAlB;AAOA,4BAAQ7C,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAEiF,UAAAA,GAAG,EAAErB,KAAP;AAAclB,UAAAA,KAAK,EAAE,CAACa,MAAM,CAAC2B,KAAR;AAArB,SAAnC,eACJvF,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAE0C,UAAAA,KAAK,EAAE2B;AAAT,SAAnC,eACI1E,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAE0C,UAAAA,KAAK,EAAE,CAACM,cAAD,EAAiB2B,WAAjB,CAAT;AAAwCjB,UAAAA,WAAW,EAAE;AAArD,SAAnC,eACI/D,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAE0C,UAAAA,KAAK,EAAE+B;AAAT,SAAnC,eACI9E,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAE0C,UAAAA,KAAK,EAAEM,cAAT;AAAyBU,UAAAA,WAAW,EAAE;AAAtC,SAAnC,eACI/D,KAAK,CAACyD,aAAN,CAAoBxD,QAAQ,CAACI,IAA7B,EAAmC;AAAE0C,UAAAA,KAAK,EAAEmC;AAAT,SAAnC,CADJ,CADJ,CADJ,CADJ,CADI,CAAR;AAMH,OAtDiH,CAAlH,CADI,CAAR;AAwDH;;AAlJ2C;;AAoJhD1E,EAAAA,iBAAiB,CAACgF,YAAlB,GAAiC;AAC7BvE,IAAAA,SAAS,EAAE,IADkB;AAE7B4B,IAAAA,IAAI,EAAE,OAFuB;AAG7B3B,IAAAA,gBAAgB,EAAE;AAHW,GAAjC;AAKA,SAAOV,iBAAP;AACH,CA3JqC,GAAtC;;AA4JA,MAAMoD,MAAM,GAAGxD,UAAU,CAACqF,MAAX,CAAkB;AAC7B5B,EAAAA,SAAS,EAAE;AACP6B,IAAAA,cAAc,EAAE,QADT;AAEPC,IAAAA,UAAU,EAAE;AAFL,GADkB;AAK7BJ,EAAAA,KAAK,kCACEnF,UAAU,CAACwF,kBADb;AAEDF,IAAAA,cAAc,EAAE,QAFf;AAGDC,IAAAA,UAAU,EAAE;AAHX;AALwB,CAAlB,CAAf;AAWA,eAAerF,SAAS,CAACE,iBAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Animated, Easing, Platform, StyleSheet, View, } from 'react-native';\nimport { withTheme } from '../core/theming';\nconst DURATION = 2400;\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nlet ActivityIndicator = /** @class */ (() => {\n    class ActivityIndicator extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                timer: new Animated.Value(0),\n                fade: new Animated.Value(!this.props.animating && this.props.hidesWhenStopped ? 0 : 1),\n            };\n            this.rotation = undefined;\n            this.startRotation = () => {\n                const { fade, timer } = this.state;\n                const { scale } = this.props.theme.animation;\n                // Show indicator\n                Animated.timing(fade, {\n                    duration: 200 * scale,\n                    toValue: 1,\n                    isInteraction: false,\n                    useNativeDriver: true,\n                }).start();\n                // Circular animation in loop\n                if (this.rotation) {\n                    timer.setValue(0);\n                    // $FlowFixMe\n                    Animated.loop(this.rotation).start();\n                }\n            };\n            this.stopRotation = () => {\n                if (this.rotation) {\n                    this.rotation.stop();\n                }\n            };\n        }\n        componentDidMount() {\n            const { animating } = this.props;\n            const { timer } = this.state;\n            // Circular animation in loop\n            this.rotation = Animated.timing(timer, {\n                duration: DURATION,\n                easing: Easing.linear,\n                // Animated.loop does not work if useNativeDriver is true on web\n                useNativeDriver: Platform.OS !== 'web',\n                toValue: 1,\n                isInteraction: false,\n            });\n            if (animating) {\n                this.startRotation();\n            }\n        }\n        componentDidUpdate(prevProps) {\n            const { animating, hidesWhenStopped, theme: { animation: { scale }, }, } = this.props;\n            const { fade } = this.state;\n            if (animating !== prevProps.animating) {\n                if (animating) {\n                    this.startRotation();\n                }\n                else if (hidesWhenStopped) {\n                    // Hide indicator first and then stop rotation\n                    Animated.timing(fade, {\n                        duration: 200 * scale,\n                        toValue: 0,\n                        useNativeDriver: true,\n                        isInteraction: false,\n                    }).start(this.stopRotation.bind(this));\n                }\n                else {\n                    this.stopRotation();\n                }\n            }\n        }\n        render() {\n            const { fade, timer } = this.state;\n            const { \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            animating, color: indicatorColor, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            hidesWhenStopped, size: indicatorSize, style, theme, ...rest } = this.props;\n            const color = indicatorColor || theme.colors.primary;\n            const size = typeof indicatorSize === 'string'\n                ? indicatorSize === 'small'\n                    ? 24\n                    : 48\n                : indicatorSize\n                    ? indicatorSize\n                    : 24;\n            const frames = (60 * DURATION) / 1000;\n            const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n            const containerStyle = {\n                width: size,\n                height: size / 2,\n                overflow: 'hidden',\n            };\n            return (React.createElement(View, Object.assign({ style: [styles.container, style] }, rest),\n                React.createElement(Animated.View, { style: [{ width: size, height: size, opacity: fade }], collapsable: false }, [0, 1].map(index => {\n                    // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n                    const inputRange = Array.from(new Array(frames), (_, frameIndex) => frameIndex / (frames - 1));\n                    const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n                        let progress = (2 * frameIndex) / (frames - 1);\n                        const rotation = index ? +(360 - 15) : -(180 - 15);\n                        if (progress > 1.0) {\n                            progress = 2.0 - progress;\n                        }\n                        const direction = index ? -1 : +1;\n                        return `${direction * (180 - 30) * easing(progress) +\n                            rotation}deg`;\n                    });\n                    const layerStyle = {\n                        width: size,\n                        height: size,\n                        transform: [\n                            {\n                                rotate: timer.interpolate({\n                                    inputRange: [0, 1],\n                                    outputRange: [\n                                        `${0 + 30 + 15}deg`,\n                                        `${2 * 360 + 30 + 15}deg`,\n                                    ],\n                                }),\n                            },\n                        ],\n                    };\n                    const viewportStyle = {\n                        width: size,\n                        height: size,\n                        transform: [\n                            {\n                                translateY: index ? -size / 2 : 0,\n                            },\n                            {\n                                rotate: timer.interpolate({ inputRange, outputRange }),\n                            },\n                        ],\n                    };\n                    const offsetStyle = index ? { top: size / 2 } : null;\n                    const lineStyle = {\n                        width: size,\n                        height: size,\n                        borderColor: color,\n                        borderWidth: size / 10,\n                        borderRadius: size / 2,\n                    };\n                    return (React.createElement(Animated.View, { key: index, style: [styles.layer] },\n                        React.createElement(Animated.View, { style: layerStyle },\n                            React.createElement(Animated.View, { style: [containerStyle, offsetStyle], collapsable: false },\n                                React.createElement(Animated.View, { style: viewportStyle },\n                                    React.createElement(Animated.View, { style: containerStyle, collapsable: false },\n                                        React.createElement(Animated.View, { style: lineStyle })))))));\n                }))));\n        }\n    }\n    ActivityIndicator.defaultProps = {\n        animating: true,\n        size: 'small',\n        hidesWhenStopped: true,\n    };\n    return ActivityIndicator;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    layer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n});\nexport default withTheme(ActivityIndicator);\n"]}