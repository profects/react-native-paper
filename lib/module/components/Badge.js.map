{"version":3,"sources":["Badge.js"],"names":["React","Animated","StyleSheet","color","black","white","withTheme","defaultSize","Badge","Component","constructor","arguments","state","opacity","Value","props","visible","componentDidUpdate","prevProps","theme","animation","scale","timing","toValue","duration","useNativeDriver","start","render","children","size","style","rest","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","createElement","Text","Object","assign","numberOfLines","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","defaultProps","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nconst defaultSize = 20;\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nlet Badge = /** @class */ (() => {\n    class Badge extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                opacity: new Animated.Value(this.props.visible ? 1 : 0),\n            };\n        }\n        componentDidUpdate(prevProps) {\n            const { visible, theme: { animation: { scale }, }, } = this.props;\n            if (visible !== prevProps.visible) {\n                Animated.timing(this.state.opacity, {\n                    toValue: visible ? 1 : 0,\n                    duration: 150 * scale,\n                    useNativeDriver: true,\n                }).start();\n            }\n        }\n        render() {\n            const { children, size = defaultSize, style, theme, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            visible, ...rest } = this.props;\n            const { opacity } = this.state;\n            const { backgroundColor = theme.colors.notification, ...restStyle } = StyleSheet.flatten(style) || {};\n            const textColor = color(backgroundColor).isLight() ? black : white;\n            const borderRadius = size / 2;\n            return (React.createElement(Animated.Text, Object.assign({ numberOfLines: 1, style: [\n                    {\n                        opacity,\n                        backgroundColor,\n                        color: textColor,\n                        fontSize: size * 0.5,\n                        ...theme.fonts.regular,\n                        lineHeight: size,\n                        height: size,\n                        minWidth: size,\n                        borderRadius,\n                    },\n                    styles.container,\n                    restStyle,\n                ] }, rest), children));\n        }\n    }\n    Badge.defaultProps = {\n        visible: true,\n        size: defaultSize,\n    };\n    return Badge;\n})();\nexport default withTheme(Badge);\nconst styles = StyleSheet.create({\n    container: {\n        alignSelf: 'flex-end',\n        textAlign: 'center',\n        textAlignVertical: 'center',\n        paddingHorizontal: 4,\n        overflow: 'hidden',\n    },\n});\n"]}