{"version":3,"sources":["Surface.js"],"names":["Surface","props","style","theme","rest","flattenedStyles","StyleSheet","flatten","elevation","isDarkTheme","dark","mode","colors","React","createElement","Animated","View","backgroundColor","surface","Component"],"mappings":"k5BAAA,oDACA,yCACA,gEACA,wCACA,kE,stBA4CMA,CAAAA,O,yRACO,iBAC6B,KAAKC,KADlC,CACGC,KADH,aACGA,KADH,CACUC,KADV,aACUA,KADV,CACoBC,IADpB,sEAEL,GAAMC,CAAAA,eAAe,CAAGC,wBAAWC,OAAX,CAAmBL,KAAnB,GAA6B,EAArD,CAFK,0BAGqBG,eAHrB,CAGGG,SAHH,CAGGA,SAHH,gCAGe,CAHf,0BAISC,CAAAA,WAJT,CAIuCN,KAJvC,CAIGO,IAJH,CAIsBC,IAJtB,CAIuCR,KAJvC,CAIsBQ,IAJtB,CAI4BC,MAJ5B,CAIuCT,KAJvC,CAI4BS,MAJ5B,CAKL,MAAQC,CAAAA,KAAK,CAACC,aAAN,CAAoBC,sBAASC,IAA7B,CAAmC,sBAAc,EAAd,CAAkBZ,IAAlB,CAAwB,CAAEF,KAAK,CAAE,CACpE,CACIe,eAAe,CAAER,WAAW,EAAIE,IAAI,GAAK,UAAxB,CACX,qBAAQH,SAAR,CAAmBI,MAAM,CAACM,OAA1B,CADW,CAEXN,MAAM,CAACM,OAHjB,CADoE,CAMpEV,SAAS,EAAI,oBAAOA,SAAP,CANuD,CAOpEN,KAPoE,CAAT,CAAxB,CAAnC,CAAR,CASH,C,qBAfiBW,KAAK,CAACM,S,eAiBb,uBAAUnB,OAAV,C","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport overlay from '../styles/overlay';\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations.\n * Overlay and/or shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nclass Surface extends React.Component {\n    render() {\n        const { style, theme, ...rest } = this.props;\n        const flattenedStyles = StyleSheet.flatten(style) || {};\n        const { elevation = 4 } = flattenedStyles;\n        const { dark: isDarkTheme, mode, colors } = theme;\n        return (React.createElement(Animated.View, Object.assign({}, rest, { style: [\n                {\n                    backgroundColor: isDarkTheme && mode === 'adaptive'\n                        ? overlay(elevation, colors.surface)\n                        : colors.surface,\n                },\n                elevation && shadow(elevation),\n                style,\n            ] })));\n    }\n}\nexport default withTheme(Surface);\n"]}