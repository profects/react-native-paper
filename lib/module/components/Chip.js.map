{"version":3,"sources":["Chip.js"],"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","color","Icon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","Component","constructor","arguments","state","elevation","Value","handlePressIn","scale","props","theme","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","render","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onLongPress","onClose","textStyle","style","testID","selectedColor","rest","dark","colors","backgroundColor","surface","borderRadius","flatten","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityStates","push","createElement","Object","assign","styles","container","OS","borderless","delayPressIn","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","content","avatarWrapper","opacity","isValidElement","cloneElement","avatarSelected","source","size","numberOfLines","fonts","regular","marginRight","marginLeft","defaultProps","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, Platform, StyleSheet, TouchableWithoutFeedback, View, } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nlet Chip = /** @class */ (() => {\n    class Chip extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                elevation: new Animated.Value(0),\n            };\n            this.handlePressIn = () => {\n                const { scale } = this.props.theme.animation;\n                Animated.timing(this.state.elevation, {\n                    toValue: 4,\n                    duration: 200 * scale,\n                    useNativeDriver: false,\n                }).start();\n            };\n            this.handlePressOut = () => {\n                const { scale } = this.props.theme.animation;\n                Animated.timing(this.state.elevation, {\n                    toValue: 0,\n                    duration: 150 * scale,\n                    useNativeDriver: false,\n                }).start();\n            };\n        }\n        render() {\n            const { mode, children, icon, avatar, selected, disabled, accessibilityLabel, onPress, onLongPress, onClose, textStyle, style, theme, testID, selectedColor, ...rest } = this.props;\n            const { dark, colors } = theme;\n            const { backgroundColor = mode === 'outlined'\n                ? colors.surface\n                : dark\n                    ? '#383838'\n                    : '#ebebeb', borderRadius = 16, } = StyleSheet.flatten(style) || {};\n            const borderColor = mode === 'outlined'\n                ? color(selectedColor !== undefined\n                    ? selectedColor\n                    : color(dark ? white : black))\n                    .alpha(0.29)\n                    .rgb()\n                    .string()\n                : backgroundColor;\n            const textColor = disabled\n                ? colors.disabled\n                : color(selectedColor !== undefined ? selectedColor : colors.text)\n                    .alpha(0.87)\n                    .rgb()\n                    .string();\n            const iconColor = disabled\n                ? colors.disabled\n                : color(selectedColor !== undefined ? selectedColor : colors.text)\n                    .alpha(0.54)\n                    .rgb()\n                    .string();\n            const selectedBackgroundColor = (dark\n                ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n                : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2))\n                .rgb()\n                .string();\n            const underlayColor = selectedColor\n                ? color(selectedColor)\n                    .fade(0.5)\n                    .rgb()\n                    .string()\n                : selectedBackgroundColor;\n            const accessibilityTraits = ['button'];\n            const accessibilityStates = [];\n            if (selected) {\n                accessibilityTraits.push('selected');\n                accessibilityStates.push('selected');\n            }\n            if (disabled) {\n                accessibilityTraits.push('disabled');\n                accessibilityStates.push('disabled');\n            }\n            return (React.createElement(Surface, Object.assign({ style: [\n                    styles.container,\n                    {\n                        elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n                        backgroundColor: selected\n                            ? selectedBackgroundColor\n                            : backgroundColor,\n                        borderColor,\n                        borderRadius,\n                    },\n                    style,\n                ] }, rest),\n                React.createElement(TouchableRipple, { borderless: true, delayPressIn: 0, style: { borderRadius }, onPress: onPress, onLongPress: onLongPress, onPressIn: this.handlePressIn, onPressOut: this.handlePressOut, underlayColor: underlayColor, disabled: disabled, accessibilityLabel: accessibilityLabel, accessibilityTraits: accessibilityTraits, accessibilityComponentType: \"button\", accessibilityRole: \"button\", accessibilityStates: accessibilityStates, testID: testID },\n                    React.createElement(View, { style: styles.content },\n                        avatar && !icon ? (React.createElement(View, { style: [styles.avatarWrapper, disabled && { opacity: 0.26 }] }, React.isValidElement(avatar)\n                            ? /* $FlowFixMe */\n                                React.cloneElement(avatar, {\n                                    /* $FlowFixMe */\n                                    style: [styles.avatar, avatar.props.style],\n                                })\n                            : avatar)) : null,\n                        icon || selected ? (React.createElement(View, { style: [\n                                styles.icon,\n                                avatar ? [styles.avatar, styles.avatarSelected] : null,\n                            ] },\n                            React.createElement(Icon, { source: icon || 'check', color: avatar ? white : iconColor, size: 18 }))) : null,\n                        React.createElement(Text, { numberOfLines: 1, style: [\n                                styles.text,\n                                {\n                                    ...theme.fonts.regular,\n                                    color: textColor,\n                                    marginRight: onClose ? 4 : 8,\n                                    marginLeft: avatar || icon || selected ? 4 : 8,\n                                },\n                                textStyle,\n                            ] }, children),\n                        onClose ? (React.createElement(TouchableWithoutFeedback, { onPress: onClose, accessibilityTraits: \"button\", accessibilityComponentType: \"button\" },\n                            React.createElement(View, { style: styles.icon },\n                                React.createElement(Icon, { source: \"close-circle\", size: 16, color: iconColor })))) : null))));\n        }\n    }\n    Chip.defaultProps = {\n        mode: 'flat',\n        disabled: false,\n        selected: false,\n    };\n    return Chip;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        borderWidth: StyleSheet.hairlineWidth,\n        borderStyle: 'solid',\n    },\n    content: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingHorizontal: 4,\n    },\n    icon: {\n        padding: 4,\n    },\n    text: {\n        minHeight: 24,\n        lineHeight: 24,\n        textAlignVertical: 'center',\n        marginVertical: 4,\n    },\n    avatar: {\n        width: 24,\n        height: 24,\n        borderRadius: 12,\n    },\n    avatarWrapper: {\n        marginRight: 4,\n    },\n    avatarSelected: {\n        position: 'absolute',\n        top: 4,\n        left: 4,\n        backgroundColor: 'rgba(0, 0, 0, .29)',\n    },\n});\nexport default withTheme(Chip);\n"]}