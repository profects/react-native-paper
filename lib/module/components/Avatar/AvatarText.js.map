{"version":3,"sources":["AvatarText.js"],"names":["React","View","StyleSheet","Color","Text","withTheme","white","defaultSize","AvatarText","Component","render","props","label","size","style","theme","labelStyle","color","rest","flatten","backgroundColor","colors","primary","restStyle","textColor","isLight","createElement","Object","assign","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","defaultProps","create","justifyContent","alignItems","textAlign","textAlignVertical"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAkC,cAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,MAAMC,WAAW,GAAG,EAApB;AACA;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIC,UAAU;AAAG;AAAc,CAAC,MAAM;AAClC,QAAMA,UAAN,SAAyBR,KAAK,CAACS,SAA/B,CAAyC;AACrCC,IAAAA,MAAM,GAAG;AACL,0BAAgF,KAAKC,KAArF;AAAA,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,IAAI,GAAGN,WAAhB;AAA6BO,QAAAA,KAA7B;AAAoCC,QAAAA,KAApC;AAA2CC,QAAAA,UAA3C;AAAuDC,QAAAA;AAAvD,OAAN;AAAA,YAAuEC,IAAvE;;AACA,mBAAiEhB,UAAU,CAACiB,OAAX,CAAmBL,KAAnB,KAA6B,EAA9F;AAAA,YAAM;AAAEM,QAAAA,eAAe,GAAGL,KAAK,CAACM,MAAN,CAAaC;AAAjC,OAAN;AAAA,YAAmDC,SAAnD;;AACA,YAAMC,SAAS,GAAGP,KAAK,KAClBd,KAAK,CAACiB,eAAD,CAAL,CAAuBK,OAAvB,KAAmC,oBAAnC,GAA0DnB,KADxC,CAAvB;AAEA,0BAAQN,KAAK,CAAC0B,aAAN,CAAoBzB,IAApB,EAA0B0B,MAAM,CAACC,MAAP,CAAc;AAAEd,QAAAA,KAAK,EAAE,CACjD;AACIe,UAAAA,KAAK,EAAEhB,IADX;AAEIiB,UAAAA,MAAM,EAAEjB,IAFZ;AAGIkB,UAAAA,YAAY,EAAElB,IAAI,GAAG,CAHzB;AAIIO,UAAAA;AAJJ,SADiD,EAOjDY,MAAM,CAACC,SAP0C,EAQjDV,SARiD;AAAT,OAAd,EASzBL,IATyB,CAA1B,eAUJlB,KAAK,CAAC0B,aAAN,CAAoBtB,IAApB,EAA0B;AAAEU,QAAAA,KAAK,EAAE,CAC3BkB,MAAM,CAACE,IADoB,EAE3B;AACIjB,UAAAA,KAAK,EAAEO,SADX;AAEIW,UAAAA,QAAQ,EAAEtB,IAAI,GAAG,CAFrB;AAGIuB,UAAAA,UAAU,EAAEvB;AAHhB,SAF2B,EAO3BG,UAP2B,CAAT;AAQnBqB,QAAAA,aAAa,EAAE;AARI,OAA1B,EAQ2BzB,KAR3B,CAVI,CAAR;AAmBH;;AAzBoC;;AA2BzCJ,EAAAA,UAAU,CAAC8B,WAAX,GAAyB,aAAzB;AACA9B,EAAAA,UAAU,CAAC+B,YAAX,GAA0B;AACtB1B,IAAAA,IAAI,EAAEN;AADgB,GAA1B;AAGA,SAAOC,UAAP;AACH,CAjC8B,GAA/B;;AAkCA,MAAMwB,MAAM,GAAG9B,UAAU,CAACsC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,cAAc,EAAE,QADT;AAEPC,IAAAA,UAAU,EAAE;AAFL,GADkB;AAK7BR,EAAAA,IAAI,EAAE;AACFS,IAAAA,SAAS,EAAE,QADT;AAEFC,IAAAA,iBAAiB,EAAE;AAFjB;AALuB,CAAlB,CAAf;AAUA,eAAevC,SAAS,CAACG,UAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport Color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nlet AvatarText = /** @class */ (() => {\n    class AvatarText extends React.Component {\n        render() {\n            const { label, size = defaultSize, style, theme, labelStyle, color, ...rest } = this.props;\n            const { backgroundColor = theme.colors.primary, ...restStyle } = StyleSheet.flatten(style) || {};\n            const textColor = color ||\n                (Color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n            return (React.createElement(View, Object.assign({ style: [\n                    {\n                        width: size,\n                        height: size,\n                        borderRadius: size / 2,\n                        backgroundColor,\n                    },\n                    styles.container,\n                    restStyle,\n                ] }, rest),\n                React.createElement(Text, { style: [\n                        styles.text,\n                        {\n                            color: textColor,\n                            fontSize: size / 2,\n                            lineHeight: size,\n                        },\n                        labelStyle,\n                    ], numberOfLines: 1 }, label)));\n        }\n    }\n    AvatarText.displayName = 'Avatar.Text';\n    AvatarText.defaultProps = {\n        size: defaultSize,\n    };\n    return AvatarText;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    text: {\n        textAlign: 'center',\n        textAlignVertical: 'center',\n    },\n});\nexport default withTheme(AvatarText);\n"]}