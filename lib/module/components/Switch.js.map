{"version":3,"sources":["Switch.js"],"names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","white","alpha","rgb","string","black","thumbTintColor","grey800","grey400","grey50","major","minor","thumbColor","trackColor","true","false","React","createElement","NativeSwitch","Component"],"mappings":"k5BAAA,oDACA,wCACA,yCACA,oDACA,wC,mtBACA,GAAMA,CAAAA,OAAO,CAAGC,2BAAcC,iBAAd,CACVD,2BAAcC,iBAAd,CAAgCC,kBADtB,CAEVC,SAFN,C,GAiDMC,CAAAA,M,oRACO,iBAC6D,KAAKC,KADlE,CACGC,KADH,aACGA,KADH,CACUC,QADV,aACUA,QADV,CACoBC,aADpB,aACoBA,aADpB,CACmCC,KADnC,aACmCA,KADnC,CAC0CC,KAD1C,aAC0CA,KAD1C,CACoDC,IADpD,yGAEL,GAAMC,CAAAA,YAAY,CAAGH,KAAK,EAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C,CACA,GAAMC,CAAAA,WAAW,CAAGC,sBAASC,EAAT,GAAgB,KAAhB,CACdL,YADc,CAEdL,QAAQ,CACJG,KAAK,CAACQ,IAAN,CACI,mBAASC,aAAT,EACGC,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADJ,CAKI,mBAASC,aAAT,EACGH,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANA,CAUJ,mBAASV,YAAT,EACGQ,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAZV,CAgBA,GAAME,CAAAA,cAAc,CAAGR,sBAASC,EAAT,GAAgB,KAAhB,CACjBd,SADiB,CAEjBI,QAAQ,CACJG,KAAK,CAACQ,IAAN,CACIO,eADJ,CAEIC,eAHA,CAIJpB,KAAK,CACDM,YADC,CAEDF,KAAK,CAACQ,IAAN,CACIQ,eADJ,CAEIC,cAVlB,CAWA,GAAMtB,CAAAA,KAAK,CAAGN,OAAO,EAAIA,OAAO,CAAC6B,KAAR,GAAkB,CAA7B,EAAkC7B,OAAO,CAAC8B,KAAR,EAAiB,EAAnD,CACR,CACEd,WAAW,CAAXA,WADF,CAEES,cAAc,CAAdA,cAFF,CADQ,CAKR,CACEM,UAAU,CAAEN,cADd,CAEEO,UAAU,CAAE,CACRC,IAAI,CAAEjB,WADE,CAERkB,KAAK,CAAE,EAFC,CAFd,CALN,CAYA,MAAQC,CAAAA,KAAK,CAACC,aAAN,CAAoBC,mBAApB,CAAkC,sBAAc,CAAE9B,KAAK,CAAEA,KAAT,CAAgBC,QAAQ,CAAEA,QAA1B,CAAoCC,aAAa,CAAED,QAAQ,CAAGJ,SAAH,CAAeK,aAA1E,CAAd,CAAyGH,KAAzG,CAAgHM,IAAhH,CAAlC,CAAR,CACH,C,oBA5CgBuB,KAAK,CAACG,S,eA8CZ,uBAAUjC,MAAV,C","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport { NativeModules, Platform, Switch as NativeSwitch, } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nconst version = NativeModules.PlatformConstants\n    ? NativeModules.PlatformConstants.reactNativeVersion\n    : undefined;\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   _onToggleSwitch = () => this.setState(state => ({ isSwitchOn: !state.isSwitchOn }));\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={this._onToggleSwitch}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component {\n    render() {\n        const { value, disabled, onValueChange, color, theme, ...rest } = this.props;\n        const checkedColor = color || theme.colors.accent;\n        const onTintColor = Platform.OS === 'ios'\n            ? checkedColor\n            : disabled\n                ? theme.dark\n                    ? setColor(white)\n                        .alpha(0.1)\n                        .rgb()\n                        .string()\n                    : setColor(black)\n                        .alpha(0.12)\n                        .rgb()\n                        .string()\n                : setColor(checkedColor)\n                    .alpha(0.5)\n                    .rgb()\n                    .string();\n        const thumbTintColor = Platform.OS === 'ios'\n            ? undefined\n            : disabled\n                ? theme.dark\n                    ? grey800\n                    : grey400\n                : value\n                    ? checkedColor\n                    : theme.dark\n                        ? grey400\n                        : grey50;\n        const props = version && version.major === 0 && version.minor <= 56\n            ? {\n                onTintColor,\n                thumbTintColor,\n            }\n            : {\n                thumbColor: thumbTintColor,\n                trackColor: {\n                    true: onTintColor,\n                    false: '',\n                },\n            };\n        return (React.createElement(NativeSwitch, Object.assign({ value: value, disabled: disabled, onValueChange: disabled ? undefined : onValueChange }, props, rest)));\n    }\n}\nexport default withTheme(Switch);\n"]}