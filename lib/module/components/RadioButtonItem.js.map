{"version":3,"sources":["RadioButtonItem.tsx"],"names":["React","View","Text","StyleSheet","TouchableRipple","RadioButton","RadioButtonContext","RadioButtonItem","isChecked","context","value","props","handlePress","onPress","onValueChange","label","style","styles","container","status","Component","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal"],"mappings":"8cAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,UAArB,KAA6D,cAA7D,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,OAASC,kBAAT,KAA2D,oBAA3D,C,GAqDMC,CAAAA,e,kaAGJC,S,CAAY,SAACC,OAAD,QACVA,CAAAA,OAAO,CAACC,KAAR,GAAkB,MAAKC,KAAL,CAAWD,KAA7B,CAAqC,SAArC,CAAiD,WADvC,E,OAGZE,W,CAAc,SAACH,OAAD,QAAqC,WAAM,IAC/CI,CAAAA,OAD+C,CACnC,MAAKF,KAD8B,CAC/CE,OAD+C,CAEvD,GAAMC,CAAAA,aAAa,CAAGL,OAAO,CAAGA,OAAO,CAACK,aAAX,CAA2B,UAAM,CAAE,CAAhE,CAEAD,OAAO,CAAGA,OAAO,EAAV,CAAeC,aAAa,CAAC,MAAKH,KAAL,CAAWD,KAAZ,CAAnC,CACD,CALa,E,kFAOL,iCACyB,KAAKC,KAD9B,CACCD,KADD,aACCA,KADD,CACQK,KADR,aACQA,KADR,CACeC,KADf,aACeA,KADf,CAGP,MACE,qBAAC,kBAAD,CAAoB,QAApB,kDACG,SAAAP,OAAO,QACN,qBAAC,eAAD,EAAiB,OAAO,CAAE,MAAI,CAACG,WAAL,CAAiBH,OAAjB,CAA1B,iDACE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAACQ,MAAM,CAACC,SAAR,CAAmBF,KAAnB,CAAb,CAAwC,aAAa,CAAC,MAAtD,iDACE,oBAAC,IAAD,kDAAOD,KAAP,CADF,CAEE,oBAAC,WAAD,EACE,KAAK,CAAEL,KADT,CAEE,MAAM,CACJ,MAAI,CAACC,KAAL,CAAWQ,MAAX,EAAsBV,OAAO,EAAI,MAAI,CAACD,SAAL,CAAeC,OAAf,CAHrC,iDAFF,CADF,CADM,EADV,CADF,CAiBD,C,6BAjC2BT,KAAK,CAACoB,S,EAA9Bb,e,CACGc,W,CAAc,kB,CAmCvB,cAAed,CAAAA,eAAf,CAEA,GAAMU,CAAAA,MAAM,CAAGd,UAAU,CAACmB,MAAX,CAAkB,CAC/BJ,SAAS,CAAE,CACTK,aAAa,CAAE,KADN,CAETC,UAAU,CAAE,QAFH,CAGTC,cAAc,CAAE,eAHP,CAITC,eAAe,CAAE,CAJR,CAKTC,iBAAiB,CAAE,EALV,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport TouchableRipple from './TouchableRipple';\nimport RadioButton from './RadioButton';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\n\ntype Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'first',\n *   };\n *\n *   render() {\n *     return(\n *       <RadioButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <RadioButton.Item label=\"First item\" value=\"first\" />\n *           <RadioButton.Item label=\"Second item\" value=\"second\" />\n *       </RadioButton.Group>\n *     )\n *   }\n * }\n *```\n */\nclass RadioButtonItem extends React.Component<Props> {\n  static displayName = 'RadioButton.Item';\n\n  isChecked = (context: RadioButtonContextType) =>\n    context.value === this.props.value ? 'checked' : 'unchecked';\n\n  handlePress = (context: RadioButtonContextType) => () => {\n    const { onPress } = this.props;\n    const onValueChange = context ? context.onValueChange : () => {};\n\n    onPress ? onPress() : onValueChange(this.props.value);\n  };\n\n  render() {\n    const { value, label, style } = this.props;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {context => (\n          <TouchableRipple onPress={this.handlePress(context)}>\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              <Text>{label}</Text>\n              <RadioButton\n                value={value}\n                status={\n                  this.props.status || (context && this.isChecked(context))\n                }\n              ></RadioButton>\n            </View>\n          </TouchableRipple>\n        )}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default RadioButtonItem;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n});\n"]}