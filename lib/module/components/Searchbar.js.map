{"version":3,"sources":["Searchbar.js"],"names":["React","StyleSheet","TextInput","I18nManager","color","IconButton","Surface","withTheme","MaterialCommunityIcon","Searchbar","Component","constructor","arguments","handleClearPress","clear","props","onChangeText","setNativeProps","args","root","isFocused","focus","blur","render","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","createElement","borderRadius","elevation","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","onPress","size","name","direction","isRTL","accessibilityLabel","Object","assign","input","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","ref","c","disabled","defaultProps","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, TextInput, I18nManager, } from 'react-native';\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     searchQuery: '',\n *   };\n *\n *   _onChangeSearch = query => this.setState({ searchQuery: query });\n *\n *   render() {\n *     const { searchQuery } = this.state;\n *     return (\n *       <Searchbar\n *         placeholder=\"Search\"\n *         onChangeText={this._onChangeSearch}\n *         value={searchQuery}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nlet Searchbar = /** @class */ (() => {\n    class Searchbar extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.handleClearPress = () => {\n                this.clear();\n                this.props.onChangeText && this.props.onChangeText('');\n            };\n        }\n        /**\n         * @internal\n         */ setNativeProps(args) {\n            return this.root && this.root.setNativeProps(args);\n        }\n        /**\n         * Returns `true` if the input is currently focused, `false` otherwise.\n         */\n        isFocused() {\n            return this.root && this.root.isFocused();\n        }\n        /**\n         * Removes all text from the TextInput.\n         */\n        clear() {\n            return this.root && this.root.clear();\n        }\n        /**\n         * Focuses the input.\n         */\n        focus() {\n            return this.root && this.root.focus();\n        }\n        /**\n         * Removes focus from the input.\n         */\n        blur() {\n            return this.root && this.root.blur();\n        }\n        render() {\n            const { clearAccessibilityLabel, clearIcon, icon, iconColor: customIconColor, inputStyle, onIconPress, placeholder, searchAccessibilityLabel, style, theme, value, ...rest } = this.props;\n            const { colors, roundness, dark, fonts } = theme;\n            const textColor = colors.text;\n            const font = fonts.regular;\n            const iconColor = customIconColor ||\n                (dark\n                    ? textColor\n                    : color(textColor)\n                        .alpha(0.54)\n                        .rgb()\n                        .string());\n            const rippleColor = color(textColor)\n                .alpha(0.32)\n                .rgb()\n                .string();\n            return (React.createElement(Surface, { style: [\n                    { borderRadius: roundness, elevation: 4 },\n                    styles.container,\n                    style,\n                ] },\n                React.createElement(IconButton, { accessibilityTraits: \"button\", accessibilityComponentType: \"button\", accessibilityRole: \"button\", borderless: true, rippleColor: rippleColor, onPress: onIconPress, color: iconColor, icon: icon ||\n                        (({ size, color }) => (React.createElement(MaterialCommunityIcon, { name: \"magnify\", color: color, size: size, direction: I18nManager.isRTL ? 'rtl' : 'ltr' }))), accessibilityLabel: searchAccessibilityLabel }),\n                React.createElement(TextInput, Object.assign({ style: [styles.input, { color: textColor, ...font }, inputStyle], placeholder: placeholder || '', placeholderTextColor: colors.placeholder, selectionColor: colors.primary, underlineColorAndroid: \"transparent\", returnKeyType: \"search\", keyboardAppearance: dark ? 'dark' : 'light', accessibilityTraits: \"search\", accessibilityRole: \"search\", ref: c => {\n                        this.root = c;\n                    }, value: value }, rest)),\n                React.createElement(IconButton, { borderless: true, disabled: !value, accessibilityLabel: clearAccessibilityLabel, color: value ? iconColor : 'rgba(255, 255, 255, 0)', rippleColor: rippleColor, onPress: this.handleClearPress, icon: clearIcon ||\n                        (({ size, color }) => (React.createElement(MaterialCommunityIcon, { name: \"close\", color: color, size: size, direction: I18nManager.isRTL ? 'rtl' : 'ltr' }))), accessibilityTraits: \"button\", accessibilityComponentType: \"button\", accessibilityRole: \"button\" })));\n        }\n    }\n    Searchbar.defaultProps = {\n        searchAccessibilityLabel: 'search',\n        clearAccessibilityLabel: 'clear',\n    };\n    return Searchbar;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    input: {\n        flex: 1,\n        fontSize: 18,\n        paddingLeft: 8,\n        alignSelf: 'stretch',\n        textAlign: I18nManager.isRTL ? 'right' : 'left',\n        minWidth: 0,\n    },\n});\nexport default withTheme(Searchbar);\n"]}