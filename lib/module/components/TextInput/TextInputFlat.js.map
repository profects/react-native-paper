{"version":3,"sources":["TextInputFlat.js"],"names":["React","View","Animated","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","InputLabel","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","LABEL_PADDING_HORIZONTAL","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","INPUT_OFFSET","TextInputFlat","Component","render","props","disabled","editable","label","error","selectionColor","underlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","font","regular","hasActiveOutline","focused","flatten","fontSize","fontSizeStyle","fontWeight","height","paddingHorizontal","viewStyle","paddingOffset","undefined","styles","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","minHeight","flatHeight","createElement","Underline","paddingTop","paddingBottom","ref","placeholderTextColor","underlineColorAndroid","input","textAlignVertical","defaultProps","Object","assign","underline","transform","scaleY","create","position","left","right","bottom","flexGrow","margin","textAlign","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Animated, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform, } from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, LABEL_PADDING_HORIZONTAL, } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, } from './helpers';\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\nconst INPUT_OFFSET = 8;\nlet TextInputFlat = /** @class */ (() => {\n    class TextInputFlat extends React.Component {\n        render() {\n            const { disabled, editable, label, error, selectionColor, underlineColor, dense, style, theme, render, multiline, parentState, innerRef, onFocus, onBlur, onChangeText, onLayoutAnimatedText, ...rest } = this.props;\n            const { colors, fonts } = theme;\n            const font = fonts.regular;\n            const hasActiveOutline = parentState.focused || error;\n            const { fontSize: fontSizeStyle, fontWeight, height, paddingHorizontal, ...viewStyle } = (StyleSheet.flatten(style) || {});\n            const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n            const paddingOffset = (paddingHorizontal !== undefined &&\n                typeof paddingHorizontal === 'number'\n                ? { paddingHorizontal }\n                : StyleSheet.flatten(styles.paddingOffset));\n            let inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n            if (disabled) {\n                inputTextColor = activeColor = color(colors.text)\n                    .alpha(0.54)\n                    .rgb()\n                    .string();\n                placeholderColor = colors.disabled;\n                underlineColorCustom = 'transparent';\n            }\n            else {\n                inputTextColor = colors.text;\n                activeColor = error ? colors.error : colors.primary;\n                placeholderColor = colors.placeholder;\n                errorColor = colors.error;\n                underlineColorCustom = underlineColor || colors.disabled;\n            }\n            const containerStyle = {\n                backgroundColor: theme.dark\n                    ? color(colors.background)\n                        .lighten(0.24)\n                        .rgb()\n                        .string()\n                    : color(colors.background)\n                        .darken(0.06)\n                        .rgb()\n                        .string(),\n                borderTopLeftRadius: theme.roundness,\n                borderTopRightRadius: theme.roundness,\n            };\n            const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n            const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n            const labelWidth = parentState.labelLayout.width;\n            const labelHeight = parentState.labelLayout.height;\n            const labelHalfWidth = labelWidth / 2;\n            const labelHalfHeight = labelHeight / 2;\n            const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) *\n                (labelHalfWidth - (labelScale * labelWidth) / 2) +\n                (1 - labelScale) * paddingOffset.paddingHorizontal;\n            const minInputHeight = dense\n                ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n                    LABEL_PADDING_TOP_DENSE\n                : MIN_HEIGHT - LABEL_PADDING_TOP;\n            const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n            const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n            if (height && typeof height !== 'number')\n                // eslint-disable-next-line\n                console.warn('Currently we support only numbers in height prop');\n            const paddingSettings = {\n                height: height ? +height : null,\n                labelHalfHeight,\n                offset: INPUT_OFFSET,\n                multiline: multiline ? multiline : null,\n                dense: dense ? dense : null,\n                topPosition,\n                fontSize,\n                label,\n                scale: fontScale,\n                isAndroid: Platform.OS === 'android',\n                styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat),\n            };\n            const pad = calculatePadding(paddingSettings);\n            const paddingFlat = adjustPaddingFlat({\n                ...paddingSettings,\n                pad,\n            });\n            const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n            const placeholderOpacity = hasActiveOutline\n                ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n                : parentState.labelLayout.measured\n                    ? 1\n                    : 0;\n            const labelProps = {\n                label,\n                onLayoutAnimatedText,\n                placeholderOpacity,\n                error,\n                placeholderStyle: styles.placeholder,\n                baseLabelTranslateY,\n                baseLabelTranslateX,\n                font,\n                fontSize,\n                fontWeight,\n                labelScale,\n                wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n                topPosition,\n                paddingOffset,\n                hasActiveOutline,\n                activeColor,\n                placeholderColor,\n                errorColor,\n            };\n            const minHeight = height ||\n                (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n            const flatHeight = inputHeight +\n                (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n            return (React.createElement(View, { style: [containerStyle, viewStyle] },\n                React.createElement(Underline, { parentState: parentState, underlineColorCustom: underlineColorCustom, error: error, colors: colors, activeColor: activeColor }),\n                React.createElement(View, { style: {\n                        paddingTop: 0,\n                        paddingBottom: 0,\n                        minHeight,\n                    } },\n                    React.createElement(InputLabel, { parentState: parentState, labelProps: labelProps }),\n                    render?.({\n                        ...rest,\n                        ref: innerRef,\n                        onChangeText,\n                        // @ts-ignore\n                        placeholder: label\n                            ? parentState.placeholder\n                            : this.props.placeholder,\n                        placeholderTextColor: placeholderColor,\n                        editable: !disabled && editable,\n                        selectionColor: typeof selectionColor === 'undefined'\n                            ? activeColor\n                            : selectionColor,\n                        onFocus,\n                        onBlur,\n                        underlineColorAndroid: 'transparent',\n                        multiline,\n                        style: [\n                            styles.input,\n                            paddingOffset,\n                            !multiline || (multiline && height) ? { height: flatHeight } : {},\n                            paddingFlat,\n                            {\n                                ...font,\n                                fontSize,\n                                fontWeight,\n                                color: inputTextColor,\n                                textAlignVertical: multiline ? 'top' : 'center',\n                            },\n                        ],\n                    }))));\n        }\n    }\n    TextInputFlat.defaultProps = {\n        disabled: false,\n        error: false,\n        multiline: false,\n        editable: true,\n        render: (props) => React.createElement(NativeTextInput, Object.assign({}, props)),\n    };\n    return TextInputFlat;\n})();\nexport default TextInputFlat;\nconst Underline = ({ parentState, error, colors, activeColor, underlineColorCustom, }) => {\n    let backgroundColor = parentState.focused\n        ? activeColor\n        : underlineColorCustom;\n    if (error)\n        backgroundColor = colors.error;\n    return (React.createElement(Animated.View, { style: [\n            styles.underline,\n            {\n                backgroundColor,\n                // Underlines is thinner when input is not focused\n                transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n            },\n        ] }));\n};\nconst styles = StyleSheet.create({\n    placeholder: {\n        position: 'absolute',\n        left: 0,\n    },\n    underline: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        bottom: 0,\n        height: 2,\n    },\n    input: {\n        flexGrow: 1,\n        margin: 0,\n        textAlign: I18nManager.isRTL ? 'right' : 'left',\n        zIndex: 1,\n    },\n    inputFlat: {\n        paddingTop: 24,\n        paddingBottom: 4,\n    },\n    inputFlatDense: {\n        paddingTop: 22,\n        paddingBottom: 2,\n    },\n    paddingOffset: {\n        paddingHorizontal: LABEL_PADDING_HORIZONTAL,\n    },\n});\n"]}