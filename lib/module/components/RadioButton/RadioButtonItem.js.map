{"version":3,"sources":["RadioButtonItem.js"],"names":["React","View","StyleSheet","withTheme","RadioButtonContext","handlePress","TouchableRipple","RadioButton","Text","RadioButtonItem","Component","render","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","props","createElement","Consumer","context","undefined","onValueChange","styles","container","pointerEvents","text","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAkC,cAAlC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAIC,eAAe;AAAG;AAAc,CAAC,MAAM;AACvC,QAAMA,eAAN,SAA8BT,KAAK,CAACU,SAApC,CAA8C;AAC1CC,IAAAA,MAAM,GAAG;AACL,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBC,QAAAA,KAAhB;AAAuBC,QAAAA,UAAvB;AAAmCC,QAAAA,OAAnC;AAA4CC,QAAAA,QAA5C;AAAsDC,QAAAA,KAAtD;AAA6DC,QAAAA,cAA7D;AAA6EC,QAAAA,MAA7E;AAAqFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF;AAA5F,UAA4G,KAAKC,KAAvH;AACA,0BAAQvB,KAAK,CAACwB,aAAN,CAAoBpB,kBAAkB,CAACqB,QAAvC,EAAiD,IAAjD,EAAwDC,OAAD,IAAa;AACxE,4BAAQ1B,KAAK,CAACwB,aAAN,CAAoBlB,eAApB,EAAqC;AAAEU,UAAAA,OAAO,EAAEC,QAAQ,GACtDU,SADsD,GAEtD,MAAMtB,WAAW,CAAC;AAChBW,YAAAA,OAAO,EAAEA,OADO;AAEhBY,YAAAA,aAAa,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE,aAFR;AAGhBhB,YAAAA;AAHgB,WAAD;AAFkB,SAArC,eAOJZ,KAAK,CAACwB,aAAN,CAAoBvB,IAApB,EAA0B;AAAEa,UAAAA,KAAK,EAAE,CAACe,MAAM,CAACC,SAAR,EAAmBhB,KAAnB,CAAT;AAAoCiB,UAAAA,aAAa,EAAE;AAAnD,SAA1B,eACI/B,KAAK,CAACwB,aAAN,CAAoBhB,IAApB,EAA0B;AAAEM,UAAAA,KAAK,EAAE,CAACe,MAAM,CAAChB,KAAR,EAAe;AAAEK,YAAAA,KAAK,EAAEI,MAAM,CAACU;AAAhB,WAAf,EAAuCjB,UAAvC;AAAT,SAA1B,EAAyFF,KAAzF,CADJ,eAEIb,KAAK,CAACwB,aAAN,CAAoBjB,WAApB,EAAiC;AAAEK,UAAAA,KAAK,EAAEA,KAAT;AAAgBK,UAAAA,QAAQ,EAAEA,QAA1B;AAAoCG,UAAAA,MAAM,EAAEA,MAA5C;AAAoDF,UAAAA,KAAK,EAAEA,KAA3D;AAAkEC,UAAAA,cAAc,EAAEA;AAAlF,SAAjC,CAFJ,CAPI,CAAR;AAUH,OAXO,CAAR;AAYH;;AAfyC;;AAiB9CV,EAAAA,eAAe,CAACwB,WAAhB,GAA8B,kBAA9B;AACA,SAAOxB,eAAP;AACH,CApBmC,GAApC;;AAqBA,eAAeN,SAAS,CAACM,eAAD,CAAxB,C,CACA;;AACA,SAASA,eAAT;AACA,MAAMoB,MAAM,GAAG3B,UAAU,CAACgC,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE,eAHT;AAIPC,IAAAA,eAAe,EAAE,CAJV;AAKPC,IAAAA,iBAAiB,EAAE;AALZ,GADkB;AAQ7B1B,EAAAA,KAAK,EAAE;AACH2B,IAAAA,QAAQ,EAAE;AADP;AARsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'first',\n *   };\n *\n *   render() {\n *     return(\n *       <RadioButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <RadioButton.Item label=\"First item\" value=\"first\" />\n *           <RadioButton.Item label=\"Second item\" value=\"second\" />\n *       </RadioButton.Group>\n *     )\n *   }\n * }\n *```\n */\nlet RadioButtonItem = /** @class */ (() => {\n    class RadioButtonItem extends React.Component {\n        render() {\n            const { value, label, style, labelStyle, onPress, disabled, color, uncheckedColor, status, theme: { colors }, } = this.props;\n            return (React.createElement(RadioButtonContext.Consumer, null, (context) => {\n                return (React.createElement(TouchableRipple, { onPress: disabled\n                        ? undefined\n                        : () => handlePress({\n                            onPress: onPress,\n                            onValueChange: context?.onValueChange,\n                            value,\n                        }) },\n                    React.createElement(View, { style: [styles.container, style], pointerEvents: \"none\" },\n                        React.createElement(Text, { style: [styles.label, { color: colors.text }, labelStyle] }, label),\n                        React.createElement(RadioButton, { value: value, disabled: disabled, status: status, color: color, uncheckedColor: uncheckedColor }))));\n            }));\n        }\n    }\n    RadioButtonItem.displayName = 'RadioButton.Item';\n    return RadioButtonItem;\n})();\nexport default withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        paddingVertical: 8,\n        paddingHorizontal: 16,\n    },\n    label: {\n        fontSize: 16,\n    },\n});\n"]}