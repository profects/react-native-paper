{"version":3,"sources":["RadioButtonIOS.js"],"names":["React","StyleSheet","View","I18nManager","color","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","RadioButtonIOS","Component","render","props","disabled","onPress","theme","status","value","rest","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","createElement","Consumer","context","checked","contextValue","Object","assign","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","style","styles","container","opacity","allowFontScaling","name","size","direction","isRTL","displayName","create","borderRadius","padding"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, I18nManager } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nlet RadioButtonIOS = /** @class */ (() => {\n    class RadioButtonIOS extends React.Component {\n        render() {\n            const { disabled, onPress, theme, status, value, ...rest } = this.props;\n            const checkedColor = disabled\n                ? theme.colors.disabled\n                : this.props.color || theme.colors.accent;\n            let rippleColor;\n            if (disabled) {\n                rippleColor = color(theme.colors.text)\n                    .alpha(0.16)\n                    .rgb()\n                    .string();\n            }\n            else {\n                rippleColor = color(checkedColor)\n                    .fade(0.32)\n                    .rgb()\n                    .string();\n            }\n            return (React.createElement(RadioButtonContext.Consumer, null, (context) => {\n                const checked = isChecked({\n                    contextValue: context?.value,\n                    status,\n                    value,\n                }) === 'checked';\n                return (React.createElement(TouchableRipple, Object.assign({}, rest, { borderless: true, rippleColor: rippleColor, onPress: disabled\n                        ? undefined\n                        : () => {\n                            handlePress({\n                                onPress,\n                                value,\n                                onValueChange: context?.onValueChange,\n                            });\n                        }, accessibilityTraits: disabled ? ['button', 'disabled'] : 'button', accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked', accessibilityRole: \"button\", accessibilityStates: disabled ? ['disabled'] : [], accessibilityLiveRegion: \"polite\", style: styles.container }),\n                    React.createElement(View, { style: { opacity: checked ? 1 : 0 } },\n                        React.createElement(MaterialCommunityIcon, { allowFontScaling: false, name: \"check\", size: 24, color: checkedColor, direction: I18nManager.isRTL ? 'rtl' : 'ltr' }))));\n            }));\n        }\n    }\n    RadioButtonIOS.displayName = 'RadioButton.IOS';\n    return RadioButtonIOS;\n})();\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: 18,\n        padding: 6,\n    },\n});\nexport default withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]}