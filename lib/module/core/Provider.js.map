{"version":3,"sources":["Provider.tsx"],"names":["React","Appearance","ThemeProvider","Provider","SettingsProvider","MaterialCommunityIcon","PortalHost","DefaultTheme","DarkTheme","Component","reduceMotionEnabled","colorScheme","getColorScheme","preferences","setState","theme","providedTheme","props","state","animation","scale","componentDidMount","addChangeListener","handleAppearanceChange","componentWillUnmount","removeChangeListener","render","children","settings","icon","getTheme"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA4C,cAA5C;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,QAAQ,IAAIC,gBAArB,QAAuD,YAAvD;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAaA,eAAe,MAAML,QAAN,SAAuBH,KAAK,CAACS,SAA7B,CAAqD;AAAA;AAAA;;AAAA,mCAC1D;AACNC,MAAAA,mBAAmB,EAAE,KADf;AAENC,MAAAA,WAAW,EAAE,CAAAV,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEW,cAAZ,OAAgC;AAFvC,KAD0D;;AAAA,oDAwBhEC,WAD+B,IAE5B;AACH,YAAM;AAAEF,QAAAA;AAAF,UAAkBE,WAAxB;AACA,WAAKC,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KA5BiE;;AAAA,sCA8B/C,MAAM;AACvB,YAAM;AAAEI,QAAAA,KAAK,EAAEC;AAAT,UAA2B,KAAKC,KAAtC;AACA,YAAM;AAAEP,QAAAA,mBAAF;AAAuBC,QAAAA;AAAvB,UAAuC,KAAKO,KAAlD;;AAEA,UAAIF,aAAJ,EAAmB;AACjB,eAAOA,aAAP;AACD,OAFD,MAEO;AACL,cAAMD,KAAK,GAAIJ,WAAW,KAAK,MAAhB,GACXH,SADW,GAEXD,YAFJ;AAIA,+CACKQ,KADL;AAEEI,UAAAA,SAAS,kCACJJ,KAAK,CAACI,SADF;AAEPC,YAAAA,KAAK,EAAEV,mBAAmB,GAAG,CAAH,GAAO;AAF1B;AAFX;AAOD;AACF,KAjDiE;AAAA;;AAMlE,QAAMW,iBAAN,GAA0B;AACxB;AACA;AACA;AACA;AACA;AACApB,IAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEqB,iBAAZ,CAA8B,KAAKC,sBAAnC;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB;AACA;AACA;AACA;AACAvB,IAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEwB,oBAAZ,CAAiC,KAAKF,sBAAtC;AACD;;AA8BD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEAG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyB,KAAKX,KAApC;AAEA,wBACE,oBAAC,UAAD,qBACE,oBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEW,QAAQ,IAAI;AAAEC,QAAAA,IAAI,EAAExB;AAAR;AAArC,oBACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAE,KAAKyB,QAAL;AAAtB,OAAwCH,QAAxC,CADF,CADF,CADF;AAOD;;AAvEiE","sourcesContent":["import * as React from 'react';\nimport { Appearance, ColorSchemeName } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\ntype State = {\n  colorScheme: ColorSchemeName;\n  reduceMotionEnabled: boolean;\n};\n\nexport default class Provider extends React.Component<Props, State> {\n  state = {\n    reduceMotionEnabled: false,\n    colorScheme: Appearance?.getColorScheme() || 'light',\n  };\n\n  async componentDidMount() {\n    // AccessibilityInfo.addEventListener(\n    //   'reduceMotionChanged',\n    //   this.updateReduceMotionSettingsInfo\n    // );\n    // this.updateReduceMotionSettingsInfo();\n    Appearance?.addChangeListener(this.handleAppearanceChange);\n  }\n\n  componentWillUnmount() {\n    // AccessibilityInfo.removeEventListener(\n    //   'reduceMotionChanged',\n    //   this.updateReduceMotionSettingsInfo\n    // );\n    Appearance?.removeChangeListener(this.handleAppearanceChange);\n  }\n\n  private handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    this.setState({ colorScheme });\n  };\n\n  private getTheme = () => {\n    const { theme: providedTheme } = this.props;\n    const { reduceMotionEnabled, colorScheme } = this.state;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  // private updateReduceMotionSettingsInfo = async () => {\n  //   try {\n  //     const reduceMotionEnabled = await AccessibilityInfo.isReduceMotionEnabled();\n\n  //     this.setState({ reduceMotionEnabled });\n  //   } catch (err) {\n  //     console.warn(err);\n  //   }\n  // };\n\n  render() {\n    const { children, settings } = this.props;\n\n    return (\n      <PortalHost>\n        <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n          <ThemeProvider theme={this.getTheme()}>{children}</ThemeProvider>\n        </SettingsProvider>\n      </PortalHost>\n    );\n  }\n}\n"]}